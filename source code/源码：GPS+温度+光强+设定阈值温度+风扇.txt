// Generated by Proteus Visual Designer for Arduino

// Peripheral Configuration Code (Do Not Edit)
//---CONFIG_BEGIN---
#pragma GCC push_options
#pragma GCC optimize ("Os")

#include <core.h> // Required by cpu
#include <cpu.h>
#include <TimerOne.h>
#include <Wire.h> // Required by TS1
#include <Tc74TempSensor.h>
#include <Grove.h>
#include <rgb_lcd.h> // Required by LCD1
#include <wire.h> // Required by LCD1
#include <grove_rgb_lcd.h>
#include <SoftwareSerial.h> // Required by GPS1
#include <GPS.h>
#include <MCP23008.h> // Required by KEYPAD1
#include <Keypad.h>

#pragma GCC pop_options

// Peripheral Constructors
CPU &io_cpu = Cpu;
TimerOne &io_timer1 = Timer1;
TC74TempSensor io_TS1 = TC74TempSensor (154);
GroveLuminanceSensor io_PD1 = GroveLuminanceSensor (3);
GroveRgbLcd io_LCD1 = GroveRgbLcd ();
GroveLED io_LED1 = GroveLED (4);
GroveLED io_LED2 = GroveLED (5);
GroveBuzzer io_BUZ1 = GroveBuzzer (7);
GroveButton io_B1 = GroveButton (6);
GPS io_GPS1 = GPS (2, 3);
Keypad_MCP23008 io_KEYPAD1 = Keypad_MCP23008 (1, 1, 1, 4, 3, "123456789*0#");

void peripheral_setup () {
 io_LCD1.begin (16, 2);
 io_GPS1.begin (9600);
 io_KEYPAD1.begin ();
}

void peripheral_loop() {
}
//---CONFIG_END---
// Flowchart Variables
long var_temp;
String var_time_;
String var_hour;
String var_minute;
long var_Stemp;
String var_Stime;
long var_i;
String var_key;
String var_keyt;
float var_lux;
long var_boundary;
float var_lat;
float var_lon;
float var_baseLat;
float var_baseLon;
float var_distance;

// Flowchart Routines
void chart_SETUP() {
 io_cpu.pinMode(6,OUTPUT);
 io_cpu.pinMode(7,OUTPUT);
 io_cpu.pinMode(9,OUTPUT);
 io_cpu.digitalWrite(6,false);
 io_cpu.digitalWrite(7,false);
 io_cpu.digitalWrite(9,false);
 var_temp=0,var_time_="",var_hour="",var_minute="",var_i=0,var_Stemp=30,var_Stime="",var_keyt="";
 var_boundary=1000;
 io_GPS1.setUpdateRate(500);
 io_GPS1.setFixRate(500);
 chart_Settemp();
 delay(1500);
}

void chart_Settemp()
{
    io_LCD1.clear();
    io_LCD1.setCursor(0,0);
    io_LCD1.print().arg("Set temperature").end();
    for (var_i=0; var_i<=1; var_i+=1)
    {
        io_KEYPAD1.waitPress();
        var_key=io_KEYPAD1.getKey(false);
        io_KEYPAD1.waitRelease();
       var_keyt=var_keyt+var_key;
       io_LCD1.setCursor(0,1);
       io_LCD1.print().arg(var_keyt).end();
     }
     var_Stemp=toInt(var_keyt);
     io_LCD1.setCursor(0,1);
     io_LCD1.print().arg(var_Stemp).arg(" is ok").end();
}

void chart_LOOP() {
    io_LCD1.clear();
    io_LCD1.setCursor(0,0);
    var_lux=io_PD1.readLuminance();
    io_LCD1.print().arg("Lux: ").arg(var_lux).end();
    io_LCD1.setCursor(0,1);
    var_temp=io_TS1.read();
    io_LCD1.print().arg("Temperature: ").arg(var_temp).end();
    chart_judge();
if(io_GPS1()) {
  io_LED2.on();
  io_GPS1.getPosition(&var_lat,&var_lon);
  if(io_B1()) {
   var_baseLat=var_lat,var_baseLon=var_lon;
   io_LED1.on();
   io_BUZ1.off();
  } else {
   if(io_LED1()) {
    var_distance=io_GPS1.getDistance(var_lat,var_lon,var_baseLat,var_baseLon);
    io_BUZ1.set(var_distance>var_boundary);
   } else {
    io_BUZ1.off();
   }
  }
 } else {
  io_LED2.off();
 }
 delay(350);
}

void chart_judge()
{
    if(var_temp>=var_Stemp)
    {
        io_cpu.digitalWrite(6,true);
    }
    else
    {
        io_cpu.digitalWrite(6,false);
    }
}

// Entry Points and Interrupt Handlers
void setup () { peripheral_setup();  chart_SETUP(); }
void loop () { peripheral_loop();  chart_LOOP(); }
